for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_unknownTopology_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
nspecies=nrow(C)
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
C_matrix[ksite,] = C #C_signif
## Real values are lines of the Q matrix
q[ksite,]
}
pdf(file="EnvEffect_unknownTopo_LVR.pdf",width=8,height=8)
par(mfrow=c(2,2))
plot(q[,1],C_matrix[,1],xlab ="q_1",ylab = "c_1",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,2],C_matrix[,2],xlab ="q_2",ylab = "c_2",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,4],C_matrix[,4],xlab ="q_4",ylab = "c_4",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,11],C_matrix[,11],xlab ="q_11",ylab = "c_11")
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
dev.off()
#### Check how Q is recovered by matrix C
rm(list=ls())
graphics.off()
set.seed(42)
nsites=100 #100
## Real, simulated parameters
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/Gompertz_simulation_800/"
# Q matrix
q=as.matrix(read.csv(paste(simul_path,"DataFoodWeb_envEffects.csv",sep="")))
q=q[,-1]
C_matrix=q #Initializing
for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
nspecies=nrow(C)
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
C_matrix[ksite,] = C #C_signif
## Real values are lines of the Q matrix
q[ksite,]
}
pdf(file="EnvEffect_unknownTopo_LVR.pdf",width=8,height=8)
par(mfrow=c(2,2))
plot(q[,1],C_matrix[,1],xlab ="q_1",ylab = "c_1",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,2],C_matrix[,2],xlab ="q_2",ylab = "c_2",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,4],C_matrix[,4],xlab ="q_4",ylab = "c_4",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,11],C_matrix[,11],xlab ="q_11",ylab = "c_11")
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
dev.off()
C_matrix
C_signif
## Real, simulated parameters
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/Gompertz_simulation_800/"
# Q matrix
q=as.matrix(read.csv(paste(simul_path,"DataFoodWeb_envEffects.csv",sep="")))
q=q[,-1]
C_matrix=C_signif_matrix=q #Initializing
for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
nspecies=nrow(C)
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
C_matrix[ksite,] = C #C_signif
C_signif_matrix[ksite,] = C_signi
## Real values are lines of the Q matrix
q[ksite,]
}
pdf(file="EnvEffect_unknownTopo_LVR.pdf",width=8,height=8)
par(mfrow=c(2,2))
plot(q[,1],C_matrix[,1],xlab ="q_1",ylab = "c_1",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,2],C_matrix[,2],xlab ="q_2",ylab = "c_2",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,4],C_matrix[,4],xlab ="q_4",ylab = "c_4",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,11],C_matrix[,11],xlab ="q_11",ylab = "c_11")
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
dev.off()
C_matrix
C_signif_matrix
C_matrix=C_signif_matrix=q #Initializing
for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
nspecies=nrow(C)
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
C_matrix[ksite,] = C #C_signif
C_signif_matrix[ksite,] = C_signif
## Real values are lines of the Q matrix
q[ksite,]
}
pdf(file="EnvEffect_unknownTopo_LVR.pdf",width=8,height=8)
par(mfrow=c(2,2))
plot(q[,1],C_matrix[,1],xlab ="q_1",ylab = "c_1",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,2],C_matrix[,2],xlab ="q_2",ylab = "c_2",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,4],C_matrix[,4],xlab ="q_4",ylab = "c_4",xlim=c(-0.1,0.6),ylim=c(-0.1,0.6))
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
plot(q[,11],C_matrix[,11],xlab ="q_11",ylab = "c_11")
abline(0,1,lwd=2,col="black")
abline(lm(C_matrix[,1] ~q[,1]),lwd=2,col="blue",lty="dashed")
dev.off()
### Compute non-zero elements in the rest of the vector
C_signif_matrix
c(3,5:10,11:12)
C_signif_matrix[,c(3,5:10,11:12)]
C_signif_matrix[abs(C_signif_matrix[,c(3,5:10,11:12)])>0,c(3,5:10,11:12)]
C_signif_matrix[(abs(C_signif_matrix[,c(3,5:10,11:12)])>0),c(3,5:10,11:12)]
(abs(C_signif_matrix[,c(3,5:10,11:12)])>0)
sum((abs(C_signif_matrix[,c(3,5:10,11:12)])>0))
C_signif_matrix[,c(3,5:10,11:12)]
size(C_signif_matrix[,c(3,5:10,11:12)])
dim(C_signif_matrix[,c(3,5:10,11:12)])
sum((abs(C_signif_matrix[,c(3,5:10,11:12)])>0))
sum((abs(C_signif_matrix[,c(3,5:10,11:12)])>0))/900
sum((abs(C_signif_matrix[,c(3,5:10,11:12)])>0.1))
sum((abs(C_signif_matrix[,c(3,5:10,11:12)])>0.1))
sum((abs(C_signif_matrix[,c(3,5:10,11:12)])>0.05))
sum((abs(C_signif_matrix[,c(3,5:10,11:12)])>0.1))
C_signif_matrix[,c(3,5:10,12)]
dim(C_signif_matrix[,c(3,5:10,12)]) #900
sum((abs(C_signif_matrix[,c(3,5:10,12)])>0))/800
sum((abs(C_signif_matrix[,c(3,5:10,12)])>0.1))
setwd("~/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/MAR_evaluation_800")
ksite
ksite=13
delta=as.matrix(read.csv(paste(simul_path,"DataFoodWeb_theorPRESS.csv",sep="")))
delta
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/LVR_simulation_800/"
# alpha matrix
Press_data=as.dataframe(read.csv(paste(simul_path,"DataFoodWeb_theorPRESS.csv",sep="")))
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/LVR_simulation_800/"
# alpha matrix
Press_data=as.data.frame(read.csv(paste(simul_path,"DataFoodWeb_theorPRESS.csv",sep="")))
Press_data
head(Press_data)
Press_data$DeltaLN[Press_data$Site==ksite,]
Press_data$DeltaLN[,Press_data$Site==ksite]
ksite
Press_data$Site==ksite
Press_data$DeltaLN[Press_data$Site==ksite]
delta<-Press_data$DeltaLN[Press_data$Site==ksite]
setwd("~/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/MAR_evaluation_800")
rm(list=ls())
graphics.off()
set.seed(42)
nsites=100 #100
nspecies=12
PRESS=1
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/LVR_simulation_800/"
# alpha matrix
Press_data=as.data.frame(read.csv(paste(simul_path,"DataFoodWeb_theorPRESS.csv",sep="")))
head(Press_data)
PRESS_pred=PRESS_true=matrix(NA,nrow=nsites,ncol=nspecies)
for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters B
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/MAR_estimation_knownTopology_800/"
# B matrix
B=as.matrix(read.csv(paste(estim_path,"estimatedB/B_point",ksite,".csv",sep="")))
B=B[,-1] #remove first column
B # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for B
B_upper=as.matrix(read.csv(paste(estim_path,"estimatedB/B_upper",ksite,".csv",sep="")))
B_upper=B_upper[,-1] #remove first column
B_upper # upper bound B CI
B_lower=as.matrix(read.csv(paste(estim_path,"estimatedB/B_lower",ksite,".csv",sep="")))
B_lower=B_lower[,-1] #remove first column
B_lower # lower bound B CI
### Computations on B
B_signif = B
B_signif[(B_lower<0)&(B_upper>0)] = 0
B_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Estimated parameters C
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/MAR_estimation_knownTopology_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Press prediction and comparison
PRESS_pred[ksite,]<-c(solve(diag(12)-B)%*%(C*PRESS))
delta<-Press_data$DeltaLN[Press_data$Site==ksite]
PRESS_true[ksite,]<-delta
}
pdf(file="PRESS_prediction_LVR_knownTopo.pdf",width=8,height=12)
for (ks in 1:nspecies){
plot(PRESS_true[,ks]PRESS_pred[,ks],xlab="True Delta ln(N)",ylab="MAR predicted Delta ln(N)",main=paste("Species = ",ks,sep=""))
abline(0,1,lwd=2,col="black")
}
dev.off()
pdf(file="PRESS_prediction_LVR_knownTopo.pdf",width=8,height=12)
for (ks in 1:nspecies){
plot(PRESS_true[,ks],PRESS_pred[,ks],xlab="True Delta ln(N)",ylab="MAR predicted Delta ln(N)",main=paste("Species = ",ks,sep=""))
abline(0,1,lwd=2,col="black")
}
dev.off()
pdf(file="PRESS_prediction_LVR_knownTopo.pdf",width=8,height=12)
par(mfrow=c(3,4))
for (ks in 1:nspecies){
plot(PRESS_true[,ks],PRESS_pred[,ks],xlab="True Delta ln(N)",ylab="MAR predicted Delta ln(N)",main=paste("Species = ",ks,sep=""))
abline(0,1,lwd=2,col="black")
}
dev.off()
pdf(file="PRESS_prediction_LVR_knownTopo.pdf",width=8,height=12)
par(mfrow=c(3,4),pty="s")
for (ks in 1:nspecies){
plot(PRESS_true[,ks],PRESS_pred[,ks],xlab="True Delta ln(N)",ylab="MAR predicted Delta ln(N)",main=paste("Species = ",ks,sep=""))
abline(0,1,lwd=2,col="black")
}
dev.off()
PRESS_pred
setwd("~/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_evaluation_800")
#########################################################################################################
##### FBarraquand 22/08/2017 - Extraction of fitted MAR parameters and comparison to simulated models ###
##### Lotka-Volterra-Ricker food web models with G. Certain.  #####################
#########################################################################################################
#### Compare PRESS predictions
rm(list=ls())
graphics.off()
set.seed(42)
nsites=100 #100
nspecies=12
PRESS=1
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/Gompertz_simulation_800/"
# alpha matrix
Press_data=as.data.frame(read.csv(paste(simul_path,"DataFoodWeb_theorPRESS.csv",sep="")))
head(Press_data)
PRESS_pred=PRESS_true=matrix(NA,nrow=nsites,ncol=nspecies)
for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters B
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_knownTopology_800/"
# B matrix
B=as.matrix(read.csv(paste(estim_path,"estimatedB/B_point",ksite,".csv",sep="")))
B=B[,-1] #remove first column
B # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for B
B_upper=as.matrix(read.csv(paste(estim_path,"estimatedB/B_upper",ksite,".csv",sep="")))
B_upper=B_upper[,-1] #remove first column
B_upper # upper bound B CI
B_lower=as.matrix(read.csv(paste(estim_path,"estimatedB/B_lower",ksite,".csv",sep="")))
B_lower=B_lower[,-1] #remove first column
B_lower # lower bound B CI
### Computations on B
B_signif = B
B_signif[(B_lower<0)&(B_upper>0)] = 0
B_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Estimated parameters C
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/LVR_foodWeb_partiallyTunedParameters/MAR_estimation_knownTopology_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Press prediction and comparison
PRESS_pred[ksite,]<-c(solve(diag(12)-B)%*%(C*PRESS))
delta<-Press_data$DeltaLN[Press_data$Site==ksite]
PRESS_true[ksite,]<-delta
}
pdf(file="PRESS_prediction_Gompertz_knownTopo.pdf",width=8,height=12)
par(mfrow=c(3,4),pty="s")
for (ks in 1:nspecies){
plot(PRESS_true[,ks],PRESS_pred[,ks],xlab="True Delta ln(N)",ylab="MAR predicted Delta ln(N)",main=paste("Species = ",ks,sep=""))
abline(0,1,lwd=2,col="black")
}
dev.off()
#########################################################################################################
##### FBarraquand 22/08/2017 - Extraction of fitted MAR parameters and comparison to simulated models ###
##### Lotka-Volterra-Ricker food web models with G. Certain.  #####################
#########################################################################################################
#### Compare PRESS predictions
rm(list=ls())
graphics.off()
set.seed(42)
nsites=100 #100
nspecies=12
PRESS=1
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/Gompertz_simulation_800/"
# alpha matrix
Press_data=as.data.frame(read.csv(paste(simul_path,"DataFoodWeb_theorPRESS.csv",sep="")))
head(Press_data)
PRESS_pred=PRESS_true=matrix(NA,nrow=nsites,ncol=nspecies)
for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters B
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_knownTopology_800/"
# B matrix
B=as.matrix(read.csv(paste(estim_path,"estimatedB/B_point",ksite,".csv",sep="")))
B=B[,-1] #remove first column
B # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for B
B_upper=as.matrix(read.csv(paste(estim_path,"estimatedB/B_upper",ksite,".csv",sep="")))
B_upper=B_upper[,-1] #remove first column
B_upper # upper bound B CI
B_lower=as.matrix(read.csv(paste(estim_path,"estimatedB/B_lower",ksite,".csv",sep="")))
B_lower=B_lower[,-1] #remove first column
B_lower # lower bound B CI
### Computations on B
B_signif = B
B_signif[(B_lower<0)&(B_upper>0)] = 0
B_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Estimated parameters C
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_knownTopology_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Press prediction and comparison
PRESS_pred[ksite,]<-c(solve(diag(12)-B)%*%(C*PRESS))
delta<-Press_data$DeltaLN[Press_data$Site==ksite]
PRESS_true[ksite,]<-delta
}
pdf(file="PRESS_prediction_Gompertz_knownTopo.pdf",width=8,height=12)
par(mfrow=c(3,4),pty="s")
for (ks in 1:nspecies){
plot(PRESS_true[,ks],PRESS_pred[,ks],xlab="True Delta ln(N)",ylab="MAR predicted Delta ln(N)",main=paste("Species = ",ks,sep=""))
abline(0,1,lwd=2,col="black")
}
dev.off()
C*PRESS
c(solve(diag(12)-B)%*%(C*PRESS))
setwd("~/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_evaluation_800")
#########################################################################################################
##### FBarraquand 22/08/2017 - Extraction of fitted MAR parameters and comparison to simulated models ###
##### Lotka-Volterra-Ricker food web models with G. Certain.  #####################
#########################################################################################################
#### Compare PRESS predictions
rm(list=ls())
graphics.off()
set.seed(42)
nsites=100 #100
nspecies=12
PRESS=1
simul_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/Gompertz_simulation_800/"
# alpha matrix
Press_data=as.data.frame(read.csv(paste(simul_path,"DataFoodWeb_theorPRESS.csv",sep="")))
head(Press_data)
PRESS_pred=PRESS_true=matrix(NA,nrow=nsites,ncol=nspecies)
for (ksite in 1:nsites){ ### Loop on sites or repeats
### Extraction of estimated and real (simulated) parameters
## Estimated parameters B
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_800/"
# B matrix
B=as.matrix(read.csv(paste(estim_path,"estimatedB/B_point",ksite,".csv",sep="")))
B=B[,-1] #remove first column
B # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for B
B_upper=as.matrix(read.csv(paste(estim_path,"estimatedB/B_upper",ksite,".csv",sep="")))
B_upper=B_upper[,-1] #remove first column
B_upper # upper bound B CI
B_lower=as.matrix(read.csv(paste(estim_path,"estimatedB/B_lower",ksite,".csv",sep="")))
B_lower=B_lower[,-1] #remove first column
B_lower # lower bound B CI
### Computations on B
B_signif = B
B_signif[(B_lower<0)&(B_upper>0)] = 0
B_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Estimated parameters C
estim_path = "/home/frederic/Documents/MAR_modelling/resubmission/MAR_foodWeb/Gompertz_foodWeb/MAR_estimation_800/"
# C matrix
C=as.matrix(read.csv(paste(estim_path,"estimatedC/C_point",ksite,".csv",sep="")))
C=C[,-1] #remove first column
C # point estimate
### All that stuff may serve no purpose #########################################################
# Confidence intervals for C
C_upper=as.matrix(read.csv(paste(estim_path,"estimatedC/C_upper",ksite,".csv",sep="")))
C_upper=C_upper[,-1] #remove first column
C_upper # upper bound C CI
C_lower=as.matrix(read.csv(paste(estim_path,"estimatedC/C_lower",ksite,".csv",sep="")))
C_lower=C_lower[,-1] #remove first column
C_lower # lower bound C CI
### Computations on C
C_signif = C
C_signif[(C_lower<0)&(C_upper>0)] = 0
C_signif ### Matrix of statistically significant coefficients at a 5% level
### All that stuff may serve no purpose #########################################################
## Press prediction and comparison
PRESS_pred[ksite,]<-c(solve(diag(12)-B)%*%(C*PRESS))
delta<-Press_data$DeltaLN[Press_data$Site==ksite]
PRESS_true[ksite,]<-delta
}
pdf(file="PRESS_prediction_Gompertz_unknownTopo.pdf",width=8,height=12)
par(mfrow=c(3,4),pty="s")
for (ks in 1:nspecies){
plot(PRESS_true[,ks],PRESS_pred[,ks],xlab="True Delta ln(N)",ylab="MAR predicted Delta ln(N)",main=paste("Species = ",ks,sep=""))
abline(0,1,lwd=2,col="black")
}
dev.off()
